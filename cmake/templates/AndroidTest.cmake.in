# Copyright (c) 2015, Ruslan Baratov
# Copyright (c) 2016, David Hirvonen
# All rights reserved.

cmake_minimum_required(VERSION 3.1) # CMP0054

if("@ADB_COMMAND@" STREQUAL "")
  message(FATAL_ERROR "Expected ADB_COMMAND")
endif()

if("${APP_SOURCE}" STREQUAL "")
  message(FATAL_ERROR "Expected APP_SOURCE")
endif()

if("@TESTING_DIR@" STREQUAL "")
  message(FATAL_ERROR "Expected TESTING_DIR")
endif()

if("@APP_TARGET@" STREQUAL "")
  message(FATAL_ERROR "Expected APP_TARGET")
endif()

if("@RESOURCE_DIR@" STREQUAL "")
  message(FATAL_ERROR "Expected RESOURCE_DIR")
endif()

set(exe_dir "@TESTING_DIR@/bin")
set(libs_dir "@TESTING_DIR@/lib")
set(data_dir "@TESTING_DIR@/data")

message("Using '@ADB_COMMAND@'")

set(adb_command "@ADB_COMMAND@")
if("@GAUZE_ANDROID_USE_EMULATOR@")
  list(APPEND adb_command "-e")
else()
  list(APPEND adb_command "-d")
endif()

if("@GAUZE_ANDROID_PUSH_QUIET@")
  set(push_quiet OUTPUT_QUIET)
else()
  set(push_quiet "")
endif()

if("@GAUZE_ANDROID_PUSH_RESOURCES_ONLY@")
  set(resources_only YES)
else()
  set(resources_only NO)
endif()

if(resources_only)
  message("Skip executable")
else()
  message("Creating directory on Android device: '${exe_dir}'")
  set(cmd ${adb_command} shell mkdir -p "${exe_dir}")
  execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
  if(NOT result EQUAL 0)
    message(FATAL_ERROR "Command failed: ${cmd}")
  endif()

  set(exe_path "${exe_dir}/@APP_TARGET@")

  message("Push executable to Android device:")
  message("  '${APP_SOURCE}'")
  message("  -> '${exe_path}'")

  set(cmd ${adb_command} push "${APP_SOURCE}" "${exe_path}")
  execute_process(COMMAND ${cmd} RESULT_VARIABLE result ${push_quiet})
  if(NOT result EQUAL 0)
    message(FATAL_ERROR "Command failed: ${cmd}")
  endif()

  message("Set executable permissions (777)")
  set(cmd ${adb_command} shell chmod 777 "${exe_path}")
  execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
  if(NOT result EQUAL 0)
    message(FATAL_ERROR "Command failed: ${cmd}")
  endif()
endif()

message("Creating directory on Android device: '${data_dir}'")
set(cmd ${adb_command} shell mkdir -p "${data_dir}")
execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed: ${cmd}")
endif()

set(app_arguments "@APP_ARGUMENTS@")
set(arguments)
foreach(arg ${app_arguments})
  string(
      REGEX
      REPLACE
      "^\(.*\)\\$<GAUZE_RESOURCE_FILE:\(.*\)>$"
      "\\2"
      resource_file
      "${arg}"
  )

  string(
      REGEX
      REPLACE
      "^\(.*\)\\$<GAUZE_RESOURCE_DIR:\(.*\)>$"
      "\\2"
      resource_dir
      "${arg}"
  )

  set(is_resource_file FALSE)
  set(is_resource_dir FALSE)

  if("${resource_file}" STREQUAL "${arg}")
    # nothing replaced => not a resource file
    if("${resource_dir}" STREQUAL "${arg}")
      # nothing replaced => not a directory with resources
    else()
      # '$<GAUZE_RESOURCE_DIR:...>' detected => directory with resources
      set(is_resource_dir TRUE)
    endif()
  else()
    # '$<GAUZE_RESOURCE_FILE:...>' detected => resource file
    set(is_resource_file TRUE)
  endif()

  if(is_resource_file)

    # extract the flag:
    string(
        REGEX
        REPLACE
        "^\(.*\)\\$<GAUZE_RESOURCE_FILE:\(.*\)>$"
        "\\1"
        resource_flag
        "${arg}"
    )

    message("Resource detected: '${resource_file}'")
    if(NOT IS_ABSOLUTE "${resource_file}")
      set(resource_file "@RESOURCE_DIR@/${resource_file}")
    endif()
    if(NOT EXISTS "${resource_file}")
      message(FATAL_ERROR "File not found: ${resource_file}")
    endif()
    if(IS_DIRECTORY "${resource_file}")
      message(FATAL_ERROR "Not a file but directory: ${resource_file}")
    endif()
    get_filename_component(res_name "${resource_file}" NAME)
    set(res_path "${data_dir}/${res_name}")
    set(arguments "${arguments} \"${resource_flag}${res_path}\"")

    message("Push resource to Android device:")
    message("  '${resource_file}'")
    message("  -> '${res_path}'")

    set(cmd ${adb_command} push "${resource_file}" "${res_path}")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result ${push_quiet})
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()
  elseif(is_resource_dir)

    # extract the flag:
    string(
        REGEX
        REPLACE
        "^\(.*\)\\$<GAUZE_RESOURCE_DIR:\(.*\)>$"
        "\\1"
        resource_flag
        "${arg}"
    )

    message("Directory with resources detected: '${resource_dir}'")
    if(NOT IS_ABSOLUTE "${resource_dir}")
      set(resource_dir "@RESOURCE_DIR@/${resource_dir}")
    endif()
    if(NOT EXISTS "${resource_dir}")
      message(FATAL_ERROR "Directory not found: ${resource_dir}")
    endif()
    if(NOT IS_DIRECTORY "${resource_dir}")
      message(FATAL_ERROR "Not a directory: ${resource_dir}")
    endif()

    # Remove trailing '/' so we can get last component correctly
    get_filename_component(resource_dir "${resource_dir}" ABSOLUTE)

    get_filename_component(res_name "${resource_dir}" NAME)
    if("${res_name}" STREQUAL "")
      message(FATAL_ERROR "Can't get directory name")
    endif()

    set(res_path "${data_dir}/${res_name}")
    set(arguments "${arguments} \"${resource_flag}${res_path}\"")

    message("Remove destination directory: '${res_path}'")
    set(cmd ${adb_command} shell rm -rf \"${res_path}\")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()

    message("Push directory to Android device:")
    message("  '${resource_dir}'")
    message("  -> '${res_path}'")

    set(cmd ${adb_command} push "${resource_dir}" "${res_path}")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result ${push_quiet})
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()
  else()
    set(arguments "${arguments} \"${arg}\"")
  endif()
endforeach()

if(resources_only)
  return()
endif()

if(NOT "${LINKED_LIBS}" STREQUAL "")
  message("Creating directory on Android device: '${libs_dir}'")
  set(cmd ${adb_command} shell mkdir -p "${libs_dir}")
  execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
  if(NOT result EQUAL 0)
    message(FATAL_ERROR "Command failed: ${cmd}")
  endif()

  message("Uploading dependent libraries to Android device")
  string(REPLACE "," ";" LINKED_LIBS "${LINKED_LIBS}")
  foreach(x ${LINKED_LIBS})
    get_filename_component(lib_name "${x}" NAME)
    set(lib_path "${libs_dir}/${lib_name}")

    message("  '${x}'")
    message("  -> '${lib_path}'")

    set(cmd ${adb_command} push "${x}" "${lib_path}")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result ${push_quiet})
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()
  endforeach()
endif()

message("Set LD_LIBRARY_PATH to '${libs_dir}'")
message("Run command on Android device:")
message("[@TESTING_DIR@]> \"${exe_path}\" ${arguments}")

set(forward_variables "")
foreach(x @x_FORWARD_ENV@)
  message("Forwarding user's variable '${x}' with value '$ENV{${x}}'")
  set(forward_variables "export ${x}=\"$ENV{${x}}\"; ${forward_variables}")
endforeach()

# Note: Add '2>&1' redirection because otherwise 'cerr' will mess up with 'echo $?'
execute_process(
    COMMAND
    ${adb_command} shell "cd \"@TESTING_DIR@\"; ${forward_variables} export LD_LIBRARY_PATH=\"${libs_dir}\"; \"${exe_path}\" ${arguments} 2>&1; echo $?"
    RESULT_VARIABLE result
    OUTPUT_VARIABLE output
    ERROR_VARIABLE output
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_STRIP_TRAILING_WHITESPACE
)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed")
endif()

message("Command output (with exit code):")
message("*** BEGIN ***")
message("${output}")
message("*** END ***")

string(REGEX REPLACE ".*\n" "" last_output_line "${output}")
string(COMPARE EQUAL "${last_output_line}" "0" is_ok)
if(NOT is_ok)
  message(
      FATAL_ERROR
      "Command exits with error code: ${last_output_line}"
  )
endif()

message("Done")
